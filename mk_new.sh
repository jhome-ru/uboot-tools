#!/bin/bash
#
#author: adeep@lexina.in
#2021.04.07

source variables.sh

function inituboot() {
	if [ ! -e ${SOURCE_FILE} ]; then
		echo "${SOURCE_FILE} doesn't exist!"
		cd ${MAIN_FOLDER}
		exit 255
	else
		source ${SOURCE_FILE} &> /dev/null # ignore warning/error
	fi

	CUR_SOC=${CONFIG_SYS_SOC}
	# FIXME!!!!
	CUR_SOC=$1
	export CUR_SOC

	cp -fv "$UBOOT_SRC_FOLDER"/{\
build/include/generated/version_autogenerated.h,\
build/include/generated/timestamp_autogenerated.h,\
build/include/config/uboot.release,\
build/.config} \
"$BUILD_FOLDER/"
	cp ${UBOOT_SRC_FOLDER}/build/u-boot.bin $TEMP_BUILD_FOLDER/bl33.bin -fv

}


function clean() {
	echo "Clean up"
	cd "${UBOOT_SRC_FOLDER}" || exit
	#make distclean
	cd "${MAIN_FOLDER}"
	rm "${TEMP_BUILD_FOLDER}" -rf
	rm "${BUILD_FOLDER}"/* -rf
	return
}


function parser() {
	local i=0
	local argv=()
	for arg in "$@" ; do
		argv[$i]="$arg"
		i=$((i + 1))
	done
	i=0
	while [ $i -lt $# ]; do
		arg="${argv[$i]}"
		i=$((i + 1)) # must place here
		case "$arg" in
			-h|--help|help)
				usage
				exit ;;
			--config)
				print_config
				return ;;
			--check-compile)
				check_compile "${argv[@]:$((i))}"
				exit ;;
			clean|distclean|-distclean|--distclean)
				clean
				exit ;;
			*)
		esac
	done
}

function build() {
	clean
	mkdir -p $TEMP_BUILD_FOLDER
	inituboot $@

	
	if [ $CUR_SOC == "axg" ]; then
	echo axg
	buildaxg2
	else
	buildgxl
	echo gxl
	fi

	cp -fv "$TEMP_BUILD_FOLDER"/{\
u-boot.bin,\
u-boot.bin.sd.bin,\
u-boot.bin.usb.bl2,\
u-boot.bin.usb.tpl}\
 "$BUILD_FOLDER/"
}

function buildaxg() {
	cp ${CUR_SOC}/bl2.n.bin.sig $TEMP_BUILD_FOLDER
	cp ${CUR_SOC}/bl30_new.bin.enc $TEMP_BUILD_FOLDER
	cp ${CUR_SOC}/bl31.img.enc $TEMP_BUILD_FOLDER
	./axg/aml_encrypt_axg --bl3enc --input $TEMP_BUILD_FOLDER/bl33.bin --output $TEMP_BUILD_FOLDER/bl33.bin.enc
	./axg/aml_encrypt_axg --bootmk --output $TEMP_BUILD_FOLDER/u-boot.bin --bl2 $TEMP_BUILD_FOLDER/bl2.n.bin.sig --bl30 $TEMP_BUILD_FOLDER/bl30_new.bin.enc --bl31 $TEMP_BUILD_FOLDER/bl31.img.enc --bl33 $TEMP_BUILD_FOLDER/bl33.bin.enc
}

function buildaxg2() {
	cp ${CUR_SOC}/bl2_new.bin $TEMP_BUILD_FOLDER
	cp ${CUR_SOC}/bl30_new.bin $TEMP_BUILD_FOLDER
	cp ${CUR_SOC}/bl31.img $TEMP_BUILD_FOLDER

	./axg/aml_encrypt_axg --bl3sig --input $TEMP_BUILD_FOLDER/bl30_new.bin \
                                        --output $TEMP_BUILD_FOLDER/bl30_new.bin.enc \
                                        --level v3 --type bl30
	./axg/aml_encrypt_axg --bl3sig --input $TEMP_BUILD_FOLDER/bl31.img \
                                        --output $TEMP_BUILD_FOLDER/bl31.img.enc \
                                        --level v3 --type bl31
    ./axg/aml_encrypt_axg --bl3sig --input $TEMP_BUILD_FOLDER/bl33.bin --compress lz4 \
                                        --output $TEMP_BUILD_FOLDER/bl33.bin.enc \
                                        --level v3 --type bl33
    ./axg/aml_encrypt_axg --bl2sig --input $TEMP_BUILD_FOLDER/bl2_new.bin \
                                        --output $TEMP_BUILD_FOLDER/bl2.n.bin.sig
    ./axg/aml_encrypt_axg --bootmk \
                --output $TEMP_BUILD_FOLDER/u-boot.bin \
                --bl2 $TEMP_BUILD_FOLDER/bl2.n.bin.sig \
                --bl30 $TEMP_BUILD_FOLDER/bl30_new.bin.enc \
                --bl31 $TEMP_BUILD_FOLDER/bl31.img.enc \
                --bl33 $TEMP_BUILD_FOLDER/bl33.bin.enc --level v3
}

function buildgxl() {
	cp ${CUR_SOC}/bl2.n.bin.sig $TEMP_BUILD_FOLDER
	cp ${CUR_SOC}/bl30_new.bin.enc $TEMP_BUILD_FOLDER
	cp ${CUR_SOC}/bl31.img.enc $TEMP_BUILD_FOLDER
	./gxl/aml_encrypt_gxl --bl3enc --input $TEMP_BUILD_FOLDER/bl33.bin --output $TEMP_BUILD_FOLDER/bl33.bin.enc --compress lz4
	./gxl/aml_encrypt_gxl --bootmk --output $TEMP_BUILD_FOLDER/u-boot.bin --bl2 $TEMP_BUILD_FOLDER/bl2.n.bin.sig --bl30 $TEMP_BUILD_FOLDER/bl30_new.bin.enc --bl31 $TEMP_BUILD_FOLDER/bl31.img.enc --bl33 $TEMP_BUILD_FOLDER/bl33.bin.enc
}

function usage() { 
cat << EOF
Usage:
$(basename $0) --help
 
Bootloader build script

command list:
  build uboot for soc_name (axg, gxl):
./$(basename $0) soc_name

EOF
exit 1
}

function main() {
	if [ -z $1 ]
	then
		usage
		return
	fi

	MAIN_FOLDER=$(pwd)
	parser $@
	build $@
}

main $@ # parse all paras to function
